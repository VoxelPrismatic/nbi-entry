package notif

import (
    "fmt"
    "strings"
    "nbientry/web/common"
)

templ (s Stage) RenderRow() {
    <div class="stage flex-row" id={ fmt.Sprintf("stage-%d", s.Id) }>
        <button hx-put={ fmt.Sprintf("/htmx/admin-stage/%d/dec", s.Id) }
            hx-target="#stage-table"
            hx-trigger="click"
            hx-swap="outerHTML"
            class="action undo"
            title="Move Up"
        >
            @common.SvgIcon("dazzle", "caret-up")
        </button>
        <button hx-put={ fmt.Sprintf("/htmx/admin-stage/%d/inc", s.Id) }
            hx-target="#stage-table"
            hx-trigger="click"
            hx-swap="outerHTML"
            class="action undo"
            title="Move Down"
        >
            @common.SvgIcon("dazzle", "caret-down")
        </button>
        <button hx-put={ fmt.Sprintf("/htmx/admin-stage/%d/new", s.Id) }
            hx-target="#stage-table"
            hx-trigger="click"
            hx-swap="outerHTML"
            class="action new"
            title="Make new stage"
        >
            @common.SvgIcon("dazzle", "plus")
        </button>
        <a href={ templ.URL(fmt.Sprintf("/admin/stage/%d", s.Id)) }>
            <h1 class="name">{ s.Name }</h1>
        </a>
    </div>
}

templ RenderStageTablePage(user common.User) {
    @common.Head("NBI Entry - Stages", "Stages")
    <body>
        @RenderStageTable()
        @common.Buttons(user, common.EditBtn{})
    </body>
}

templ RenderStageTable() {
    <div class="flex-col" id="stage-table">
        for _, s := range AllStages() {
            @s.RenderRow()
        }
    </div>
}

templ (s Stage) RenderPage() {
    @common.Head(s.Name, "Stage Details")
    <body>
        <div class="flex-col">
            @s.RenderHead_View()
            @s.RenderNotifs()
        </div>
        @common.Buttons(common.User{}, common.EditBtn{})
    </body>
}

templ (s Stage) RenderHead_View() {
    <div class="flex-col" id="stage-head">
        <div class="flex-row">
            <h1>{ s.Name }</h1>
            <button hx-patch={ fmt.Sprintf("/htmx/admin-stage/%d", s.Id) }
                hx-target="#stage-head"
                hx-trigger="click"
                hx-swap="outerHTML"
                class="action edit"
                title="Edit Stage"
            >
                @common.SvgIcon("dazzle", "pencil")
            </button>
        </div>
        <div>
            if s.Description == "" {
                <i>No description</i>
            } else {
                @common.Markdown(s.Description)
            }
        </div>
    </div>
}

templ (s Stage) RenderHead_Edit() {
    <div class="flex-col" id="stage-head">
        <form hx-post={ fmt.Sprintf("/htmx/admin-stage/%d", s.Id) }>
            <div class="flex-row">
                <h1>
                    <input type="text" name="name" value={ s.Name } placeholder="Stage Name"/>
                </h1>
                <button hx-get={ fmt.Sprintf("/htmx/admin-stage/%d", s.Id) }
                    hx-target="#stage-head"
                    hx-trigger="click"
                    hx-swap="outerHTML"
                    class="action undo"
                    title="Discard Changes"
                >
                    @common.SvgIcon("dazzle", "trash-undo")
                </button>
                <button hx-delete={ fmt.Sprintf("/htmx/admin-stage/%d", s.Id) }
                    hx-target="#stage-head"
                    hx-trigger="click"
                    hx-swap="outerHTML"
                    class="action delete"
                    title="Delete Stage"
                    hx-confirm="Are you sure you want to delete this stage?"
                >
                    @common.SvgIcon("dazzle", "trash")
                </button>
                <button hx-post={ fmt.Sprintf("/htmx/admin-stage/%d", s.Id) }
                    hx-target="#stage-head"
                    hx-trigger="click"
                    hx-swap="outerHTML"
                    class="action save"
                    title="Save Stage"
                >
                    @common.SvgIcon("dazzle", "floppy-disk")
                </button>
            </div>
            <textarea name="description" placeholder="Stage Description; Supports Markdown" rows="10">{ s.Description }</textarea>
        </form>
    </div>
}

templ (s Stage) RenderNotifs() {
    <div class="flex-col" id="stage-notifs">
        <h1>Notifications</h1>
        for _, app := range AllApplicationSegments() {
            @s.RenderApplicationSegment_View(app)
        }

        @s.RenderApplicationSegment_Template(ApplicationSegment{ Id: 0 })
    </div>
}

templ (s Stage) RenderNotifAdd(app ApplicationSegment, user common.User) {
    if user.Id != 0 {
        @s.RenderNotifUser(app, user)
    }
    <select hx-put={ fmt.Sprintf("/htmx/admin-notif/%d/%d", app.Id, s.Id) }
        id={ fmt.Sprintf("app-%d-user-add", app.Id) }
        hx-target={ fmt.Sprintf("#app-%d-user-add", app.Id) }
        hx-swap="outerHTML"
        hx-trigger="change"
        name="user"
    >
        <option value="0" selected disabled>Add User</option>
        for _, u := range (Notification{ AppSegId: app.Id, StageId: s.Id }).NegateUsers() {
            <option value={ fmt.Sprintf("%d", u.Id) }>{ u.FullName }</option>
        }
    </select>
    <script>for(var e of $$("select")) e.value = "0"</script>

}

templ (s Stage) RenderNotifUser(app ApplicationSegment, u common.User) {
    <div class="stage-chip" id={ fmt.Sprintf("app-%d-user-%d", app.Id, u.Id) }>
        @u.RenderChip()
        <button hx-delete={ fmt.Sprintf("/htmx/admin-notif/%d/%d/%d", app.Id, s.Id, u.Id) }
            hx-target={ fmt.Sprintf("#app-%d-user-%d", app.Id, u.Id) }
            hx-trigger="click"
            hx-swap="outerHTML"
            hx-confirm="Are you sure you want to delete this notification?"
            class="action delete glass"
            title="Delete Notification"
        >
            @common.SvgIcon("dazzle", "trash")
        </button>
    </div>
}


templ (s Stage) RenderApplicationSegment_View(app ApplicationSegment) {
    <div class={ "application-segment", "flex-col", app.color() } id={ fmt.Sprintf("app-%d", app.Id) }>
        <div class="app-name flex-row">
            <h2>{ app.Name }</h2>
            <button hx-patch={ fmt.Sprintf("/htmx/admin-notif/%d/%d", app.Id, s.Id) }
                hx-target={ fmt.Sprintf("#app-%d", app.Id) }
                hx-trigger="click"
                hx-swap="outerHTML"
                class="action edit"
                title="Edit Application Segment"
            >
                @common.SvgIcon("dazzle", "pencil")
            </button>
        </div>
        <div class="scroll flex-row">
            for _, u := range GetNotifications(s, app) {
                @s.RenderNotifUser(app, u)
            }

            @s.RenderNotifAdd(app, common.User{ Id: 0 })
        </div>
    </div>
}

templ (s Stage) RenderApplicationSegment_Edit(app ApplicationSegment) {
    <div class={ "application-segment", "flex-col", app.color() } id={ fmt.Sprintf("app-%d", app.Id) }>
        <form hx-post={ fmt.Sprintf("/htmx/admin-notif/%d/%d", app.Id, s.Id) }
            hx-trigger="submit"
            hx-swap="outerHTML"
            hx-target={ fmt.Sprintf("#app-%d", app.Id) }
        >
            <div class="app-name flex-row">
                <h2>
                    <input type="text" name="name" value={ app.Name } placeholder="Application Segment Name"/>
                </h2>
                <button hx-get={ fmt.Sprintf("/htmx/admin-notif/%d/%d", app.Id, s.Id) }
                    hx-target={ fmt.Sprintf("#app-%d", app.Id) }
                    hx-trigger="click"
                    hx-swap="outerHTML"
                    class="action undo"
                    type="button"
                    title="Discard Changes"
                >
                    @common.SvgIcon("dazzle", "trash-undo")
                </button>
                <button hx-delete={ fmt.Sprintf("/htmx/admin-notif/%d", app.Id) }
                    hx-target={ fmt.Sprintf("#app-%d", app.Id) }
                    hx-trigger="click"
                    hx-swap="outerHTML"
                    class="action delete"
                    type="button"
                    title="Delete Application Segment"
                    hx-confirm="Are you sure you want to delete this application segment?"
                >
                    @common.SvgIcon("dazzle", "trash")
                </button>
                <button type="submit" class="action save" title="Save Application Segment">
                    @common.SvgIcon("dazzle", "floppy-disk")
                </button>
            </div>
            <div class="scroll color">
                <h3>Color:</h3>
                for _, color := range []string{ "rose", "love", "gold", "tree", "iris", "foam", "pine" } {
                    <input id={ fmt.Sprintf("app-%d-color-%s", app.Id, color) }
                        type="radio" name="color" value={ color } checked?={ app.Color == color }
                        class={ templ_color(color) } onchange="colorParent(this)"/>
                    <label for={ fmt.Sprintf("app-%d-color%s", app.Id, color) }>{ color }</label>
                    <br>
                }
            </div>
        </form>
    </div>
}

templ (app ApplicationSegment) RenderCustomColor() {
    <div id={ fmt.Sprintf("app-%d-color-custom-div", app.Id) }>
        <input type="radio" name="color" value="custom" checked?={ strings.HasPrefix(app.Color, "#") }
            onchange="colorParent(this)" class={ templ_color(app.Color) }/>
        <label for={ fmt.Sprintf("app-%d-color-custom", app.Id) }>
        <label for={ fmt.Sprintf("app-%d-color-custom-input", app.Id) }>Custom</label>
            <input type="color" name="color" value={ app.Color } id={ fmt.Sprintf("app-%d-color-custom-input", app.Id) }/>
        </label>
    </div>
}

templ (s Stage) RenderApplicationSegment_Template(app ApplicationSegment) {
    if app.Id != 0 {
        @s.RenderApplicationSegment_Edit(app)
    }
    <div class="application-segment flex-row" id="app-new">
        <button hx-put={ fmt.Sprintf("/htmx/admin-notif/%d", s.Id) }
            hx-target="#app-new"
            hx-trigger="click"
            hx-swap="outerHTML"
            class="action new"
            title="New Application Segment"
        >
            @common.SvgIcon("dazzle", "plus")
        </button>
        <div class="app-name">New Application Segment</div>
    </div>
}
