package notif

import (
    "fmt"
    "strings"
    "nbientry/web/common"
    "nbientry/css"
)

templ (s Stage) RenderRow(stages []Stage) {
    <div flex="row" class={ css.Pad(8) } id={ fmt.Sprintf("stage-%d", s.Id) }
        layer="surface" hover="overlay">
        if stages[0].Id == s.Id {
            <button class="action gold" disabled title="Already at the top!">
                @common.SvgIcon("dazzle", "caret-up")
            </button>
        } else {
            @common.Action("Move Up", "caret-up", templ.Attributes{
                "hx-put": fmt.Sprintf("/htmx/stage/%d/dec", s.Id),
                "hx-target": "#stage-table",
            })
        }

        if stages[len(stages) - 1].Id == s.Id {
            <button class="action gold" disabled title="Already at the bottom!">
                @common.SvgIcon("dazzle", "caret-down")
            </button>
        } else {
            @common.Action("Move Down", "caret-down", templ.Attributes{
                "hx-put": fmt.Sprintf("/htmx/stage/%d/inc", s.Id),
                "hx-target": "#stage-table",
            })
        }
        @common.Action("New Stage", "plus", templ.Attributes{
            "hx-put": fmt.Sprintf("/htmx/stage/%d/new", s.Id),
            "hx-target": "#stage-table",
        })
        <a href={ templ.URL(fmt.Sprintf("/admin/stage/%d", s.Id)) } class={ "link-color" } w-100>
            <h1 m="nil">{ s.Name }</h1>
        </a>
    </div>
}

templ RenderStageTablePage(user common.User) {
    @common.Head("NBI Entry - Stages", "Stages")
    <body>
        @RenderStageTable()
        @common.Buttons(user, common.EditBtn{})
    </body>
}

templ RenderStageTable() {
    <div flex="col" id="stage-table">
        {{ stages := AllStages() }}
        for _, s := range stages {
            @s.RenderRow(stages)
        }
    </div>
}

templ (s Stage) RenderPage(user common.User) {
    @common.Head(s.Name, "Stage Details")
    <body>
        <div flex="col">
            @s.RenderHead_View()
            @s.RenderNotifs()
            <div flex="col" class={ css.Pad(16) } id="stage-variables" layer="surface">
                @s.Variable().RenderInViewer()
            </div>
        </div>
        @common.Buttons(user, common.EditBtn{})
    </body>
}

templ (s Stage) RenderHead_View() {
    <div flex="col" class={ css.Pad(16) } id="stage-head" layer="surface">
        <div flex="row">
            <h1 plus-input>{ s.Name }</h1>
            @common.Action("Edit Stage", "pencil", templ.Attributes{
                "hx-patch": fmt.Sprintf("/htmx/stage/%d", s.Id),
                "hx-target": "#stage-head",
            })
        </div>
        <div>
            if s.Description == "" {
                <i>No description</i>
            } else {
                @common.Markdown(s.Description)
            }
        </div>
    </div>
}

templ (s Stage) RenderHead_Edit() {
    <div flex="col" class={ css.Pad(16) } id="stage-head" layer="surface">
        <form flex="col" hx-post={ fmt.Sprintf("/htmx/stage/%d", s.Id) }>
            <div class={ css.FlexGap("row", 8) }>
                <h1 plus-input>
                    <input type="text" name="name" value={ s.Name } placeholder="Stage Name" border/>
                </h1>
                @common.Action("Discard Changes", "trash-undo", templ.Attributes{
                    "hx-get": fmt.Sprintf("/htmx/stage/%d", s.Id),
                    "hx-target": "#stage-head",
                })
                @common.Action("Delete Stage", "trash", templ.Attributes{
                    "hx-delete": fmt.Sprintf("/htmx/stage/%d", s.Id),
                    "hx-target": "#stage-head",
                    "hx-confirm": "Are you sure you want to delete this stage?",
                })
                @common.Action("Save Stage", "floppy-disk", templ.Attributes{
                    "hx-post": fmt.Sprintf("/htmx/stage/%d", s.Id),
                    "hx-target": "#stage-head",
                    "type": "submit",
                })
            </div>
            <div flex w-100>
                <textarea name="description"
                    placeholder="Stage Description; Supports Markdown"
                    rows="10"
                    class={ css.Gap(8) }
                    border
                >
                    { s.Description }
                </textarea>
            </div>
        </form>
    </div>
}

templ (s Stage) RenderNotifs() {
    <div id="stage-notifs" class={ css.Pad(16) } flex="col" layer="surface">
        <h1 plus-input>Notifications</h1>
        for _, app := range AllApplicationSegments() {
            @s.RenderApplicationSegment_View(app)
        }

        @s.RenderApplicationSegment_Template(ApplicationSegment{ Id: 0 })
    </div>
}

templ (s Stage) RenderNotifAdd(app ApplicationSegment, user common.User) {
    if user.Id != 0 {
        @s.RenderNotifUser(app, user)
    }

}

templ (s Stage) RenderNotifUser(app ApplicationSegment, u common.User) {
    <div class="stage-chip" id={ fmt.Sprintf("app-%d-user-%d", app.Id, u.Id) }>
        @u.RenderChip()
        @common.Action("Delete Notification", "trash", templ.Attributes{
            "hx-delete": fmt.Sprintf("/htmx/notif/%d/%d/%d", app.Id, s.Id, u.Id),
            "hx-target": fmt.Sprintf("#app-%d-user-%d", app.Id, u.Id),
            "hx-confirm": "Are you sure you want to delete this notification?",
        })
    </div>
}


templ (s Stage) RenderApplicationSegment_View(app ApplicationSegment) {
    <div flex="col" class={ "application-segment", app.color() } id={ fmt.Sprintf("app-%d", app.Id) }>
        <div flex="row" class={ "app-name" }>
            <h2 plus-input>{ app.Name }</h2>
            {{ users := (Notification{ AppSegId: app.Id, StageId: s.Id }).NegateUsers() }}
            <select hx-put={ fmt.Sprintf("/htmx/notif/%d/%d", app.Id, s.Id) }
                id={ fmt.Sprintf("app-%d-user-add", app.Id) }
                hx-target={ fmt.Sprintf("#app-%d", app.Id) }
                hx-swap="outerHTML"
                hx-trigger="change"
                name="user"
                border
                disabled?={ len(users) == 0 }
            >
                if len(users) > 0 {
                    <option value="0" selected disabled>Add User</option>
                    for _, u := range users {
                        <option value={ fmt.Sprintf("%d", u.Id) } title={ u.Email }>{ u.FullName }</option>
                    }
                } else {
                    <option value="0" selected disabled>No more users</option>
                }
            </select>
            <script>for(var e of $$("select")) e.value = "0"</script>
            @common.Action("Edit Application Segment", "pencil", templ.Attributes{
                "hx-patch": fmt.Sprintf("/htmx/notif/%d/%d", app.Id, s.Id),
                "hx-target": fmt.Sprintf("#app-%d", app.Id),
            })
        </div>
        <div flex="row wrap" class="scroll">
            for _, u := range GetNotifications(s, app) {
                @s.RenderNotifUser(app, u)
            }

            @s.RenderNotifAdd(app, common.User{ Id: 0 })
        </div>
    </div>
}

templ (s Stage) RenderApplicationSegment_Edit(app ApplicationSegment) {
    <div flex="col" class={ "application-segment", app.color() } id={ fmt.Sprintf("app-%d", app.Id) }>
        <form hx-post={ fmt.Sprintf("/htmx/notif/%d/%d", app.Id, s.Id) }
            hx-trigger="submit"
            hx-swap="outerHTML"
            hx-target={ fmt.Sprintf("#app-%d", app.Id) }
        >
            <div flex="row" class="app-name">
                <h2 plus-input>
                    <input type="text" name="name" value={ app.Name } placeholder="Application Segment Name" border/>
                </h2>
                @common.Action("Discard Changes", "trash-undo", templ.Attributes{
                    "hx-get": fmt.Sprintf("/htmx/notif/%d/%d", app.Id, s.Id),
                    "hx-target": fmt.Sprintf("#app-%d", app.Id),
                })
                @common.Action("Delete Application Segment", "trash", templ.Attributes{
                    "hx-delete": fmt.Sprintf("/htmx/notif/%d", app.Id),
                    "hx-target": fmt.Sprintf("#app-%d", app.Id),
                    "hx-confirm": "Are you sure you want to delete this application segment?",
                })
                @common.Action("Save Application Segment", "floppy-disk", templ.Attributes{
                    "type": "submit",
                })
            </div>
            <div class="scroll color">
                <h3 m="nil">Color:</h3>
                for _, color := range []string{ "rose", "love", "gold", "tree", "iris", "foam", "pine" } {
                    <input id={ fmt.Sprintf("app-%d-color-%s", app.Id, color) }
                        type="radio" name="color" value={ color } checked?={ app.Color == color }
                        class={ templ_color(color) } onchange="colorParent(this)"/>
                    <label for={ fmt.Sprintf("app-%d-color%s", app.Id, color) }>{ color }</label>
                    <br>
                }
            </div>
        </form>
    </div>
}

templ (app ApplicationSegment) RenderCustomColor() {
    <div id={ fmt.Sprintf("app-%d-color-custom-div", app.Id) }>
        <input type="radio" name="color" value="custom" checked?={ strings.HasPrefix(app.Color, "#") }
            onchange="colorParent(this)" class={ templ_color(app.Color) }/>
        <label for={ fmt.Sprintf("app-%d-color-custom", app.Id) }>
        <label for={ fmt.Sprintf("app-%d-color-custom-input", app.Id) }>Custom</label>
            <input type="color" name="color" value={ app.Color } id={ fmt.Sprintf("app-%d-color-custom-input", app.Id) }/>
        </label>
    </div>
}

templ (s Stage) RenderApplicationSegment_Template(app ApplicationSegment) {
    if app.Id != 0 {
        @s.RenderApplicationSegment_Edit(app)
    }
    <div flex="row" class="application-segment" id="app-new">
        @common.Action("New Application Segment", "plus", templ.Attributes{
            "hx-put": fmt.Sprintf("/htmx/notif/%d", s.Id),
            "hx-target": "#app-new",
        })
        <div class="app-name">New Application Segment</div>
    </div>
}
