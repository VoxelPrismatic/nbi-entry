package common

import (
    "os"
    "fmt"
    "strings"
    "html/template"
)

// ICONS FROM https://www.svgrepo.com/collection/dazzle-line-icons
var svg_cache = map[string]templ.Component{}

func SvgIcon(collection string, icon string) templ.Component {
    loc := fmt.Sprintf("./src/svg/icons/%s/%s.svg", collection, icon)
    return SvgFile(loc, icon, true)
}

func SvgFile(loc string, icon string, stroke bool) templ.Component {
    cache_loc := fmt.Sprintf("%s/%s/%t", loc, icon, stroke)

    if icon == "-" {
        delete(svg_cache, cache_loc)
        icon = ""
    }

    if svg, ok := svg_cache[cache_loc]; ok {
        return svg
    }

    bytes, err := os.ReadFile(loc)
    if err != nil {
        return to_component(loc)

    }

    str := string(bytes)
    str = strings.SplitN(str, "<svg", 2)[1]

    if !stroke {
        str = " data-no-stroke=true " + str
    }

    if icon == "" {
        str = "<svg class=\"svg-img\" " + str
    } else {
        str = fmt.Sprintf(`<svg data-id="%s" class="svg-cache" %s`, icon, str)
    }

    t, err := template.New("example").Parse(str)
    if err != nil {
        return to_component(err.Error())
    }

    ret := templ.FromGoHTML(t, nil)

    svg_cache[cache_loc] = ret
    return ret
}

templ to_component(str string) {
    { str }
}

templ SvgUpload(path string, id string, target string, stroke bool) {
    <div class="svg-upload" id={ id + "-svg" }>
        @SvgFile(path, "-", stroke)
        <input style="display:none" type="text" name="url" value={ path } />
        <input type="file"
            name="file"
            accept="image/svg+xml"
            style="display:none"
            id={ id + "-svg-input" }
            hx-encoding="multipart/form-data"
            hx-post="/htmx/upload-svg"
            hx-swap="outerHTML"
            hx-target={ "#" + id + "-svg" }
            hx-headers={ fmt.Sprintf(`{"X-Target":"%s","X-Name":"%s","X-Path":"%t"}`, target, id, stroke) }
        />
        <label data-for={ id + "-svg-input" }
            for={ id + "-svg-input" }
            onclick="$('#' + this.dataset.for).click()"
        >
            <button class="btn action upload glass" type="button">
                @SvgIcon("dazzle", "upload")
            </button>
        </label>
    </div>
}

templ ImgUpload(path string, id string, name string) {
    <div class="img-upload" id={ id + "-" + name }>
        <img src={ path } id={ id + "-" + name + "-image" }/>
        <input style="display:none" type="text" name={ name } value={ path }/>
        <label data-for={ id + "-" + name + "-image-input" }
            for={ id + "-" + name + "-image-input" }
            onclick="$('#' + this.dataset.for).click()"
        >
            <button class="btn action upload glass" type="button">
                @SvgIcon("dazzle", "upload")
            </button>
        </label>
        <input type="file"
            name={ name + "-image" }
            accept="image/png, image/jpeg, image/webp"
            style="display:none"
            id={ id + "-" + name + "-image-input" }
            data-for={ "#" + id + "-" + name + "-image" }
            data-name={ id }
            onchange="uploadImage(this)"
        />
        <div class="svg-cache">
            @SvgIcon("dazzle", "loader")
        </div>
    </div>
}
